buildscript {
    repositories {
        maven {
            name 'Gradle Shadow'
            url 'http://dl.bintray.com/content/johnrengelman/gradle-plugins'
        }
    }
    dependencies {
        classpath 'org.gradle.plugins:shadow:0.7.4'
    }
}

apply plugin: 'shadow'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

// Provided configuration {{{1
configurations { provided; api }

sourceSets {
  main {
    compileClasspath += configurations.provided
  }
}

idea {
  module {
    scopes.PROVIDED.plus += configurations.provided
  }
}

eclipse {
  classpath {
    plusConfigurations += configurations.provided
  }
}
// MCP {{{1
import org.apache.tools.ant.taskdefs.condition.Os
import java.io.File

class Download extends DefaultTask {
  @Input String src
  @OutputFile File dest
  @TaskAction void download() {
    ant.get(src: this.src, dest: this.dest)
  }
}

def runMCPTask(String name) {
  def mcpDir = new File(buildDir, 'mcp')
  def cmd
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    cmd = ["cmd", "/c", name + ".bat"]
  } else {
    cmd = ["/bin/bash", name + ".sh"]
  }

  cmd << '--client'

  Process proc = new ProcessBuilder(cmd).directory(mcpDir).start()
  proc.consumeProcessOutput(System.out, System.err)

  return proc.waitFor()
}

task downloadMCP(type: Download) {
  src = 'http://mcp.ocean-labs.de/files/archive/mcp811.zip'
  dest = new File(buildDir, 'mcp.zip')
}

task setupMCP(dependsOn: downloadMCP) <<{
  def mcpDir = new File(buildDir, 'mcp')
  ant.unzip src: downloadMCP.outputs.files.files.iterator().next(), dest: mcpDir

  if (runMCPTask('decompile') > 0) {
    error 'decompiling'
  }

  def binDir = files(new File(mcpDir, 'bin/minecraft'), fileTree(dir: new File(mcpDir, 'jars/libraries')))

  sourceSets.main.compileClasspath += binDir
  idea.module.scopes.PROVIDED.plus += binDir
  eclipse.classpath.plusConfigurations += binDir
}

// BON {{{1
File deobFile(File obbed) {
  File deob = new File(obbed.absolutePath + '.deob')
  javaexec {
    classpath = files(new File(buildDir, 'BON.jar'))
    main = 'immibis.bon.cui.MCPRemap'
    args = ['-mcp', new File(buildDir, 'mcp').absolutePath,
            '-from', 'OBF',
            '-to', 'MCP',
            '-side', 'CLIENT',
            '-in', obbed.absolutePath,
            '-out', deob.absolutePath]
  }

  return deob
}

task downloadBON(type: Download) {
  src = 'http://dl.dropbox.com/u/2944265/mods/BON.jar'
  dest = new File(buildDir, 'BON.jar')
}

task deobApiDependencies(dependsOn: [downloadBON, setupMCP]) <<{
  configurations.api.each { File file ->
    File deob = deobFile(file)

    sourceSets.main.compileClasspath += files(deob)
    idea.module.scopes.PROVIDED.plus += files(deob)
    eclipse.classpath.plusConfigurations += files(deob)
  }
}

compileJava.dependsOn deobApiDependencies
// }}}1

version = "1.10.00"

repositories {
    maven {
      name = "liteloader"
      url = "http://dl.liteloader.com/versions/"
    }
    mavenCentral()
}

dependencies {
  api 'com.mumfrey:liteloader:1.6.4'
  compile 'net.sf.jazzy:jazzy-core:0.5.2'
}

shadow {
  extension = 'litemod'
  classifier = 'deob'
}

task reobf(dependsOn: [tasks.shadow, downloadBON, setupMCP], type: JavaExec) {
  main = 'immibis.bon.cui.MCPRemap'
  classpath = files(new File(buildDir, 'BON.jar'))
  args = ['-mcp', new File(buildDir, 'mcp').absolutePath,
          '-from', 'MCP',
          '-to', 'OBF',
          '-side', 'CLIENT',
          '-ref', new File(buildDir, 'mcp/bin/minecraft').absolutePath,
          '-in', shadow.shadowJar,
          '-out', new File(shadow.destinationDir, "${archivesBaseName}-${version}.${shadow.extension}").absolutePath]
}

build.dependsOn reobf
